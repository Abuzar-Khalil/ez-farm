# Generated by Django 5.2 on 2025-05-11 20:46

import django.db.models.deletion
import django.utils.timezone
import user.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('farm_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='farm name')),
                ('farm_location', models.CharField(blank=True, max_length=255, null=True, verbose_name='farm location')),
                ('farm_size', models.FloatField(blank=True, null=True, verbose_name='farm size (acres)')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('ur', 'Urdu')], default='en', max_length=10, verbose_name='preferred language')),
                ('is_farm_owner', models.BooleanField(default=True, verbose_name='farm owner status')),
                ('role', models.CharField(choices=[('owner', 'Farm Owner'), ('manager', 'Farm Manager'), ('veterinarian', 'Veterinarian'), ('worker', 'Farm Worker'), ('accountant', 'Accountant')], default='owner', max_length=50, verbose_name='role')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name='hire date')),
                ('job_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='job title')),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='contact number')),
                ('can_manage_animals', models.BooleanField(default=False, verbose_name='can manage animals')),
                ('can_manage_health', models.BooleanField(default=False, verbose_name='can manage health records')),
                ('can_manage_feeding', models.BooleanField(default=False, verbose_name='can manage feeding')),
                ('can_manage_inventory', models.BooleanField(default=False, verbose_name='can manage inventory')),
                ('can_manage_sales', models.BooleanField(default=False, verbose_name='can manage sales')),
                ('can_manage_employees', models.BooleanField(default=False, verbose_name='can manage employees')),
                ('can_view_reports', models.BooleanField(default=False, verbose_name='can view reports')),
                ('employer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to=settings.AUTH_USER_MODEL, verbose_name='employer')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
    ]
